# -*- coding: utf-8 -*-
"""
Created on Mon Aug  9 09:25:11 2021

@author: Tyler
"""

import pandas as pd
import numpy as np
import pandas_datareader.data as web
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns

#F5OB4NT2O8MAOMLY

#Getting the Data from Yahoo, saving it in the "Data" DataFrame indexed by Ticker

Ticker = 'VOO'
Start = '2018-01-01'
End = dt.datetime.today()
Partitions = 4000

Data = pd.DataFrame(data = None)
Data[Ticker] = web.DataReader(Ticker, 'av-weekly-adjusted', start=Start, api_key = 'F5OB4NT2O8MAOMLY')['close']
StartPrice = Data[Ticker][1]


#Calculating the daily return in percent change and counting the number of occurances
#within 1% intervals, this is stored as a list "Ys", converting this list to a 
#DataFrame called "Returns"

DataDifferences = Data.diff()

out = pd.DataFrame(index = Data.index[1:], columns = ['Weekly change'])

for week in list(range(1,len(Data))):
    PercentChange = DataDifferences[Ticker][week] / Data[Ticker][week-1]
    out.iloc[week-1] = PercentChange

Ys = list()

for point in list(np.linspace(-1,1,Partitions)):
    Ys.append(len(out[(out['Weekly change'] > point-(1/Partitions)) & (out['Weekly change'] < point+(1/Partitions))
]))
    
    
Returns = pd.DataFrame(data = Ys, columns = ["Weekly Percent Return Occurances"])
#sns.barplot(np.linspace(-1,1,201), Ys )

#weighting daily return probability based on the number of occurances in the list
TotalDays = int(Returns.sum())

PercentOccurance = pd.DataFrame()
PercentOccurance = Returns["Weekly Percent Return Occurances"].div(TotalDays)

#Running the simulation by first rolling a random integer then comparing it to
SimsNum = int(10) 
DaysNum = TotalDays
IsList = list()
SimDF = pd.DataFrame(index = range(0,DaysNum), columns = range(0,SimsNum))

for Sim in range(0,SimsNum):
    StockPrice = StartPrice

    for days in range(0,DaysNum):
        roll = np.random.randint(1,TotalDays+1)
        SumCounter = 0
        i = 0
        
        while i < len(Returns):
            if (Returns["Weekly Percent Return Occurances"][i] + SumCounter) < roll:
                SumCounter = Returns["Weekly Percent Return Occurances"][i] + SumCounter
                i += 1
            else:
                #print(i)
                StockPrice = ((((2*i)+1)/len(Returns))*StockPrice)
                #print(StockPrice)
                SimDF[Sim][days] = StockPrice
                break
        pass
    print("sim ended")
    print((Sim+1)/SimsNum)
    pass

PltNum = 4

plt.plot(SimDF[range(0,PltNum)])

plt.plot(SimDF.sum(axis = 1)/SimsNum)

Aver = out.mean()
print(Aver)

